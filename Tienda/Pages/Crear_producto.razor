@page "/producto-crear"
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Producto</h3>
<EditForm Model="@libro" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @* Agregar un formulario para la informacion de producto  *@
    <div class="form-group">
        <label for="Codigo">Codigo del producto</label>
        <InputText id="Codigo" @bind-Value="libro.Codigo" class="form-control" />
        <ValidationMessage For="() => libro.Codigo" />
    </div>
    <div class="form-group">
        <label for="Nombre">Nombre del producto</label>
        <InputText id="Nombre" @bind-Value="libro.Nombre" class="form-control" />
        <ValidationMessage For="() => libro.Nombre" />
    </div>
    <div class="form-group">
        <label for="Descripcion"> Descripcion del producto </label>
        <InputText id="Descripcion" @bind-Value="libro.Descripcion" class="form-control" />
    </div>
    <div class="form-group">
        <label for="PrecioVenta">Precio de venta del producto</label>
        <InputNumber id="PrecioVenta" @bind-Value="libro.PrecioVenta" class="form-control" />
    </div>
    <div class="form-group">
        <label for="PrecioCompra">Precio de compra del producto</label>
        <InputNumber id="PrecioCompra" @bind-Value="libro.PrecioCompra" class="form-control" />
    </div>
    <div class="form-group">
        <label for="Editorial">Editorial del libro</label>
        <InputText id="Editorial" @bind-Value="libro.Editorial" class="form-control" />
        <ValidationMessage For="() => libro.Editorial" />
    </div>
    <div class="form-group">
        <label for="Categoria">Categoria del libro</label>
        <InputText id="Categoria" @bind-Value="libro.Categoria" class="form-control" />
        <ValidationMessage For="() => libro.Categoria" />
    </div>
    <div class="form-group">
        <label for="Autor">Autor del libro</label>
        <InputText id="Autor" @bind-Value="libro.Autor" class="form-control" />
        <ValidationMessage For="() => libro.Autor" />
    </div>

    @* opcion guardar*@
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Guardar</button>
    </div>


</EditForm>

@if (libros != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Codigo</th>
                <th>Nombre</th>
                <th>Descripcion</th>
                <th>Precio de venta</th>
                <th>Precio de compra</th>
                <th>Editorial</th>
                <th>Categoria</th>
                <th>Autor</th>
                <th>Editar</th>
                <th>Eliminar</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var libro in libros)
            {
                <tr>
                    <td>@libro.Codigo</td>
                    <td>@libro.Nombre</td>
                    <td>@libro.Descripcion</td>
                    <td>@libro.PrecioVenta</td>
                    <td>@libro.PrecioCompra</td>
                    <td>@libro.Editorial</td>
                    <td>@libro.Categoria</td>
                    <td>@libro.Autor</td>
                    <td>
                        <button class="btn btn-danger"
                                @onclick="@(() => BorrarCatedratico(libro.Codigo))">
                            Eliminar
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-warning"
                                @Referencia a la pagina de editar@
                                @onclick="@(() => NavigationManager.NavigateTo($"/edicion/{libro.Codigo}"))">
                            Editar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private Libros libro = new Libros();

    List<Libros> libros = new List<Libros>();

    protected async Task Guardar()
    {
        libros.Add(libro);
        await localStorage.SetItemAsync("libros", libros);
    }

    protected override async Task OnInitializedAsync()
    {   //La primera vez que se corre poner en comentarios, pues como no existen datos
        //convierta la lista catedraticos en null
        //libros = await localStorage.GetItemAsync<List<Libros>>("catedraticos");
    }
    protected async Task BorrarCatedratico(string Codigo)
    {
        libros.Remove(libros.First(c => c.Codigo == Codigo));
        await localStorage.SetItemAsync("catedraticos", libros);

    }



}
